# This is exclusively windows containers?
# 
# resources:
#   containers:
#   - container: linux-anvil  # identifier (no spaces allowed)
#     image: condaforge/linux-anvil  # container image name
#     localImage: false  # whether to build the image locally instead of pulling from a registry

jobs:
- job: win_64
  pool:
    # vmImage: vs2015-win2012r2
    vmImage: vs2017-win2016
  strategy:
    maxParallel: 4  
    matrix:
      python27:
        CONFIG: win_c_compilervs2008python2.7
      python35:
        CONFIG: win_c_compilervs2015python3.5
      python36:
        CONFIG: win_c_compilervs2015python3.6
  steps:
    # Need to install VC 9.0 only for Python 2.7
    # Once we understand how to do tasks conditional on build matrix variables
    # we could merge this into azure-windows.yml
    - powershell: |
        $wc = New-Object net.webclient
        $wc.Downloadfile("https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi", "VCForPython27.msi")
        Start-Process "VCForPython27.msi" /qn -Wait
      displayName: 'Install VC 9.0'

    # - script: |
    #     choco install vcpython27
    #     choco install visualcplusplusexpress2008
    #   condition: contains(variables['CONFIG'], 'vs2008')
    #   displayName: Install VS2008

    # - powershell: |
    #     $client = new-object System.Net.WebClient
    #     $client.DownloadFile("https://download.microsoft.com/download/E/8/E/E8EEB394-7F42-4963-A2D8-29559B738298/VS2008ExpressWithSP1ENUX1504728.iso","C:\Downloads\VS2008ExpressSP1.iso")
    #     $out = Mount-DiskImage -ImagePath "C:\Downloads\VS2008ExpressSP1.iso" -PassThru
    #     $driveLetter = ($out | Get-Volume).DriveLetter
    #     cd "${driveLetter}:\VCExpress"
    #     .\setup.exe /q | Out-Null

    # - powershell: |
    #     $client = new-object System.Net.WebClient
    #     $client.DownloadFile("https://download.microsoft.com/download/E/8/E/E8EEB394-7F42-4963-A2D8-29559B738298/VS2008ExpressWithSP1ENUX1504728.iso","C:\Downloads\VS2008ExpressSP1.iso")

    # - script: install_miniconda.bat
    - task: CondaEnvironment@1
      inputs:
        packageSpecs: 'python=3.6 conda-build conda conda-forge::conda-forge-ci-setup=2' # Optional
        installOptions: "-c conda-forge"
        updateConda: false

    - script: set PYTHONUNBUFFERED=1

    # Add our channels.
    - script: conda.exe config --set show_channel_urls true
      displayName: configure conda
    - script: conda.exe config --remove channels defaults
      displayName: configure conda
    - script: conda.exe config --add channels defaults
      displayName: configure conda
    - script: conda.exe config --add channels conda-forge
      displayName: configure conda

    - script: |
        echo on
        conda.exe install --quiet --yes "conda-forge::vs2008_express_vc_python_patch"
      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Install VS2008 x64 patch

    # - script: |
    #     echo on 
    #     call "C:\miniconda\scripts\setup_x64.bat"
    #   condition: contains(variables['CONFIG'], 'vs2008')
    #   displayName: Run VS2008 x64 patch

    # Configure the VM.
    - script: call run_conda_forge_build_setup
      displayName: conda-forge build setup

    - script: conda.exe build recipe -m .ci_support\%CONFIG%.yaml --quiet
      displayName: Build recipe

- job: osx_64
  pool:
    vmImage: xcode9-macos10.13
  strategy:
    maxParallel: 4  
    matrix:
      python27:
        CONFIG: osx_python2.7
      python35:
        CONFIG: osx_python3.5
      python36:
        CONFIG: osx_python3.6
  steps:
  - script: |
      echo ""
      echo "Removing homebrew from Travis CI to avoid conflicts."
      curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > ~/uninstall_homebrew
      chmod +x ~/uninstall_homebrew
      ~/uninstall_homebrew -fq
      rm ~/uninstall_homebrew
    displayName: Remove homebrew

  - script: |
      curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz -O MacOSX10.9.sdk.tar.xz
      sudo tar -xf MacOSX10.9.sdk.tar.xz -C /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs

  - script: sudo chown -R ${USER} /usr/local/miniconda
    displayName: Chown conda

  - task: CondaEnvironment@1
    inputs:
      packageSpecs: 'python=3.6 conda-build conda conda-forge::conda-forge-ci-setup=2' # Optional
      installOptions: "-c conda-forge"
      updateConda: false

  - script: |
      ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs
      echo "1"

  - script: |
      echo ""
      echo "Configuring conda."
      
      setup_conda_rc ./ ./recipe ./.ci_support/${CONFIG}.yaml

      source run_conda_forge_build_setup
    displayName: Configure conda and conda-build

  - script: |
      mangle_compiler ./ ./recipe ./.ci_support/${CONFIG}.yaml
    displayName: Mangle compiler

  - script: |
      make_build_number ./ ./recipe ./.ci_support/${CONFIG}.yaml
    displayName: Generate build number clobber

  - script: | 
      conda build ./recipe -m ./.ci_support/${CONFIG}.yaml --clobber-file ./.ci_support/clobber_${CONFIG}.yaml
    displayName: Build recipe

  - script: |
      upload_package ./ ./recipe ./.ci_support/${CONFIG}.yaml
    displayName: Upload recipe


- job: linux_64
  pool:
    vmImage: ubuntu-16.04
  strategy:
    maxParallel: 4
    matrix:
      python27:
        CONFIG: linux_python2.7
      python35:
        CONFIG: linux_python3.5
      python36:
        CONFIG: linux_python3.6
  steps:
  - script: |
      sudo pip install --upgrade pip
      sudo pip install setuptools shyaml
    displayName: Install dependencies
  - script: .circleci/run_docker_build.sh
    displayName: Run docker build
